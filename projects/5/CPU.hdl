// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Take the intruction and split it into control bits if the instruction is of type C
    Mux16(a=false, b=instruction, sel=instruction[15], out[12]=a, out[11]=zxc, out[10]=nxc, out[9]=zyc, out[8]=nyc, out[7]=fc, out[6]=noc, out[5]=loadA, out[4]=loadD, out[3]=writeM, out[2]=jmp1, out[1]=jmp2, out[0]=jmp3);

    // Mux between ALU output and instruction coming in for ARegister
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=insMuxAlu);

    // Or together loadA with op code to load in both cases
    Not(in=instruction[15], out=opA);
    Or(a=loadA, b=opA, out=loadOrOp);

    // Load the 16-bit instruction into the A register
    ARegister(in=insMuxAlu, load=loadOrOp, out=aRegOut, out[0..14]=addressM);

    // Mux the A Register with inM in order to select between A / M for computations
    Mux16(a=aRegOut, b=inM, sel=a, out=aMuxIn);

    // Load the output of the ALU into the D register
    DRegister(in=aluOut, load=loadD, out=dRegOut);

    // Load the ALU with the control bits
    ALU(x=dRegOut, y=aMuxIn, zx=zxc, nx=nxc, zy=zyc, ny=nyc, f=fc, no=noc, out=aluOut, out=outM, zr=aluZr, ng=aluNg);

    // Desired logic:
    // If j1 AND ALU out is negative, load = 1 
    And(a=jmp1, b=aluNg, out=j1);
    // If j2 AND ALU out is zero, load = 1
    And(a=jmp2, b=aluZr, out=j2);
    // If j3 AND ALU out is not zero or negative, load = 1
    Or(a=aluZr, b=aluNg, out=zrOrNg);
    Not(in=zrOrNg, out=zrNorNg);
    And(a=jmp3, b=zrNorNg, out=j3);
    Or(a=j1, b=j2, out=j1OrJ2);
    Or(a=j1OrJ2, b=j3, out=pcLoad);

    // Create inc which is just not pcLoad
    Not(in=pcLoad, out=notPcLoad);

    // Set up program counter
    PC(in=aRegOut, load=pcLoad, inc=notPcLoad, reset=reset, out[0..14]=pc);

}
