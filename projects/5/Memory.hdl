// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // 0 - 16383 = 000000000000000 - 011111111111111
    // 16384 - 24575 = 100000000000000 - 101111111111111
    // 24576 = 110000000000000
    // We can use a condition if the first bit is 1, split between RAM and I/O
    // Then if the second bit is also 1, we can split between screen and keyboard
    // First Bit = address[15]
    // Second Bit = address[14]
    // Set up load variables
    Not(in=address[14], out=notFirst);
    And(a=load, b=notFirst, out=loadRam);
    And(a=load, b=address[14], out=loadScreen);
    // RAM 16k 
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    // Screen
    Screen(in=in, load=loadScreen, address=address[0..12], out=screenOut);
    // Keyboard
    Keyboard(out=keyboardOut);
    // Set up selection of final output
    Mux16(a=ramOut, b=screenOut, sel=address[14], out=ramMuxScreen);
    // Set up AND for keyboardOut
    And(a=address[14], b=address[13], out=isKeyboard);
    // Mux together ramMuxScreen and keyboardOut
    Mux16(a=ramMuxScreen, b=keyboardOut, sel=isKeyboard, out=out);
}
